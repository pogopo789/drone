// Generated by gencpp from file multiwii/Waypoints.msg
// DO NOT EDIT!


#ifndef MULTIWII_MESSAGE_WAYPOINTS_H
#define MULTIWII_MESSAGE_WAYPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <multiwii/Waypoint.h>

namespace multiwii
{
template <class ContainerAllocator>
struct Waypoints_
{
  typedef Waypoints_<ContainerAllocator> Type;

  Waypoints_()
    : number_points(0)
    , waypoints()  {
    }
  Waypoints_(const ContainerAllocator& _alloc)
    : number_points(0)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _number_points_type;
  _number_points_type number_points;

   typedef std::vector< ::multiwii::Waypoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::multiwii::Waypoint_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::multiwii::Waypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multiwii::Waypoints_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoints_

typedef ::multiwii::Waypoints_<std::allocator<void> > Waypoints;

typedef boost::shared_ptr< ::multiwii::Waypoints > WaypointsPtr;
typedef boost::shared_ptr< ::multiwii::Waypoints const> WaypointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multiwii::Waypoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multiwii::Waypoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multiwii::Waypoints_<ContainerAllocator1> & lhs, const ::multiwii::Waypoints_<ContainerAllocator2> & rhs)
{
  return lhs.number_points == rhs.number_points &&
    lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multiwii::Waypoints_<ContainerAllocator1> & lhs, const ::multiwii::Waypoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multiwii

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multiwii::Waypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multiwii::Waypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multiwii::Waypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multiwii::Waypoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multiwii::Waypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multiwii::Waypoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multiwii::Waypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb869cb92178fdbaf5d0e46feaa0ac83";
  }

  static const char* value(const ::multiwii::Waypoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb869cb92178fdbaULL;
  static const uint64_t static_value2 = 0xf5d0e46feaa0ac83ULL;
};

template<class ContainerAllocator>
struct DataType< ::multiwii::Waypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multiwii/Waypoints";
  }

  static const char* value(const ::multiwii::Waypoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multiwii::Waypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 number_points\n"
"multiwii/Waypoint[] waypoints\n"
"================================================================================\n"
"MSG: multiwii/Waypoint\n"
"uint8 wp_no\n"
"uint8 action\n"
"uint32 lat\n"
"uint32 lon\n"
"uint32 alt\n"
"uint16 p1\n"
"uint16 p2\n"
"uint16 p3\n"
"uint8 nav_flag\n"
;
  }

  static const char* value(const ::multiwii::Waypoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multiwii::Waypoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_points);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multiwii::Waypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multiwii::Waypoints_<ContainerAllocator>& v)
  {
    s << indent << "number_points: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_points);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::multiwii::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIWII_MESSAGE_WAYPOINTS_H
