# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multiwii/Waypoints.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import multiwii.msg

class Waypoints(genpy.Message):
  _md5sum = "cb869cb92178fdbaf5d0e46feaa0ac83"
  _type = "multiwii/Waypoints"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 number_points
multiwii/Waypoint[] waypoints
================================================================================
MSG: multiwii/Waypoint
uint8 wp_no
uint8 action
uint32 lat
uint32 lon
uint32 alt
uint16 p1
uint16 p2
uint16 p3
uint8 nav_flag"""
  __slots__ = ['number_points','waypoints']
  _slot_types = ['uint8','multiwii/Waypoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number_points,waypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoints, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number_points is None:
        self.number_points = 0
      if self.waypoints is None:
        self.waypoints = []
    else:
      self.number_points = 0
      self.waypoints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.number_points
      buff.write(_get_struct_B().pack(_x))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_2B3I3HB().pack(_x.wp_no, _x.action, _x.lat, _x.lon, _x.alt, _x.p1, _x.p2, _x.p3, _x.nav_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      start = end
      end += 1
      (self.number_points,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = multiwii.msg.Waypoint()
        _x = val1
        start = end
        end += 21
        (_x.wp_no, _x.action, _x.lat, _x.lon, _x.alt, _x.p1, _x.p2, _x.p3, _x.nav_flag,) = _get_struct_2B3I3HB().unpack(str[start:end])
        self.waypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.number_points
      buff.write(_get_struct_B().pack(_x))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_2B3I3HB().pack(_x.wp_no, _x.action, _x.lat, _x.lon, _x.alt, _x.p1, _x.p2, _x.p3, _x.nav_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      start = end
      end += 1
      (self.number_points,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = multiwii.msg.Waypoint()
        _x = val1
        start = end
        end += 21
        (_x.wp_no, _x.action, _x.lat, _x.lon, _x.alt, _x.p1, _x.p2, _x.p3, _x.nav_flag,) = _get_struct_2B3I3HB().unpack(str[start:end])
        self.waypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3I3HB = None
def _get_struct_2B3I3HB():
    global _struct_2B3I3HB
    if _struct_2B3I3HB is None:
        _struct_2B3I3HB = struct.Struct("<2B3I3HB")
    return _struct_2B3I3HB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
