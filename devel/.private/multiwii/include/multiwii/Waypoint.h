// Generated by gencpp from file multiwii/Waypoint.msg
// DO NOT EDIT!


#ifndef MULTIWII_MESSAGE_WAYPOINT_H
#define MULTIWII_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multiwii
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : wp_no(0)
    , action(0)
    , lat(0)
    , lon(0)
    , alt(0)
    , p1(0)
    , p2(0)
    , p3(0)
    , nav_flag(0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : wp_no(0)
    , action(0)
    , lat(0)
    , lon(0)
    , alt(0)
    , p1(0)
    , p2(0)
    , p3(0)
    , nav_flag(0)  {
  (void)_alloc;
    }



   typedef uint8_t _wp_no_type;
  _wp_no_type wp_no;

   typedef uint8_t _action_type;
  _action_type action;

   typedef uint32_t _lat_type;
  _lat_type lat;

   typedef uint32_t _lon_type;
  _lon_type lon;

   typedef uint32_t _alt_type;
  _alt_type alt;

   typedef uint16_t _p1_type;
  _p1_type p1;

   typedef uint16_t _p2_type;
  _p2_type p2;

   typedef uint16_t _p3_type;
  _p3_type p3;

   typedef uint8_t _nav_flag_type;
  _nav_flag_type nav_flag;





  typedef boost::shared_ptr< ::multiwii::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multiwii::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::multiwii::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::multiwii::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::multiwii::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multiwii::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multiwii::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multiwii::Waypoint_<ContainerAllocator1> & lhs, const ::multiwii::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.wp_no == rhs.wp_no &&
    lhs.action == rhs.action &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.alt == rhs.alt &&
    lhs.p1 == rhs.p1 &&
    lhs.p2 == rhs.p2 &&
    lhs.p3 == rhs.p3 &&
    lhs.nav_flag == rhs.nav_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multiwii::Waypoint_<ContainerAllocator1> & lhs, const ::multiwii::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multiwii

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multiwii::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multiwii::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multiwii::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multiwii::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multiwii::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multiwii::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multiwii::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cadd3e271d812dac2f4b57212407a0e8";
  }

  static const char* value(const ::multiwii::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcadd3e271d812dacULL;
  static const uint64_t static_value2 = 0x2f4b57212407a0e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::multiwii::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multiwii/Waypoint";
  }

  static const char* value(const ::multiwii::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multiwii::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 wp_no\n"
"uint8 action\n"
"uint32 lat\n"
"uint32 lon\n"
"uint32 alt\n"
"uint16 p1\n"
"uint16 p2\n"
"uint16 p3\n"
"uint8 nav_flag\n"
;
  }

  static const char* value(const ::multiwii::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multiwii::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wp_no);
      stream.next(m.action);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.p1);
      stream.next(m.p2);
      stream.next(m.p3);
      stream.next(m.nav_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multiwii::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multiwii::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "wp_no: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wp_no);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "lat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.alt);
    s << indent << "p1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.p1);
    s << indent << "p2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.p2);
    s << indent << "p3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.p3);
    s << indent << "nav_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nav_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIWII_MESSAGE_WAYPOINT_H
